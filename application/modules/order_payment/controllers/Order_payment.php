<?php if (!defined('BASEPATH')) exit('No direct script access allowed');

class Order_payment extends MAIN_Controller
{
    /*
     *  //validate change order payment status
        //unpaid
        //paid
        //cash on delivery
        //refunded
     */

    const PAYMENT_STATUS = array(
        "unpaid"=>array(
            'label' => 'unpaid',
            'color' => '#e0b50b'
        ),
        "paid"=>array(
            'label' => 'paid',
            'color' => '#06962e'
        ),

        "cod"=>array(
            'label' => 'cod',
            'color' => '#076bb7'
        ),

        "cod_paid" => array(
            'label' => 'cod_paid',
            'color' => '#06962e'
        ),

        "refunded"=>array(
            'label' => 'refunded',
            'color' => '#d30000'
        )
    );

    public function __construct()
    {
        parent::__construct();
        $this->init('order_payment');
    }


    public function onLoad()
    {
        parent::onLoad(); // TODO: Change the autogenerated stub

        $this->load->model("order_payment/order_payment_model","mOrderPayment");

    }

    public function link_call(){

        $link = $this->input->get("redirect");
        $token = $this->input->get("token");

        $token = TokenSetting::get_by_token($token,"logged");

        if($token!=NULL){
            $this->mUserBrowser->refreshData($token->uid);
            redirect(base64_decode($link));
        }

        redirect("order_payment/payment_error");

    }

    public function onCommitted($isEnabled)
    {
       if(!$isEnabled)
           return;


        //setup payment
        if(ModulesChecker::isEnabled("payment")){

            $payment_redirection = site_url("payment/make_payment");
            $payment_callback_success = site_url("order_payment/payment_done");
            $payment_callback_error = site_url("order_payment/payment_error");

            PaymentsProvider::provide("order_payment",array(
                array(
                    'id'=> PaymentsProvider::PAYPAL_ID,
                    'payment'=> _lang("PayPal"),
                    'image'=> TemplateManager::assets("payment","img/paypal-logo.png"),
                    'description'=>  _lang('Pay using PayPal.com')
                ),
                array(
                    'id'=> PaymentsProvider::STRIPE_ID,
                    'payment'=>  _lang("Credit Card"),
                    'image'=> TemplateManager::assets("payment","img/credit-card-logo.png"),
                    'description'=>  _lang('Pay with your Credit Card: Visa, MasterCard using stripe.com')
                ),
                array(
                    'id'=> PaymentsProvider::RAZORPAY_ID,
                    'payment'=>  _lang("Razorpay"),
                    'image'=> TemplateManager::assets("payment","img/razorpay-logo.png"),
                    'description'=>  _lang('Pay with your Credit Card: Visa, MasterCard using razorpay.com')
                ),

               /* array(
                    'id'=> PaymentsProvider::FLUTTERWAVE,
                    'payment'=> _lang('Credit Card'),
                    'image'=> TemplateManager::assets("payment","img/credit-card-logo.png"),
                    'description'=> 'Pay with your Credit Card: Visa, MasterCard using flutterwave.com'
                ),*/
                array(
                    'id'=> PaymentsProvider::COD_ID,
                    'payment'=> _lang('Cash payment'),
                    'image'=> TemplateManager::assets("payment","img/cod-logo.png"),
                    'description'=> 'Pay when you receive your item(s)'
                ),

            ),
                $payment_redirection,
                $payment_callback_success,
                $payment_callback_error
            );

        }

    }


    public function payment_done(){

        $id = intval($this->input->get("invoiceid"));
        $method = Text::input($this->input->get("method"));
        $transaction = Text::input($this->input->get("paymentId"));
        $key = Text::input($this->input->get("key"));

        $payerID = Text::input($this->input->get("PayerID"));
        $paymentId = Text::input($this->input->get("paymentId"));
        $token = Text::input($this->input->get("token"));


        if($method == "paypal"){

            $params = array(
                'paymentId' => $paymentId,
                'payerID' => $payerID,
                'token' => $token
            );


            $result = Modules::run('payment/paypal/getPaymentStatus',$params);

            if($result == 1){

                $data["invoiceid"] = $id;
                $this->mPaymentModel->updateInvoice($id,$method,$transaction,$key);

                $data['title'] = _lang("Payment done");
                $this->load->view("payment/client_view/html/success",$data);

            }else{
                $this->payment_error();
            }

        }else if($method == "stripe"){

            $this->mPaymentModel->updateInvoice($id,$method,$transaction,$key);

            $data['title'] = _lang("Payment done");
            $this->load->view("payment/client_view/html/success",$data);

        }else if($method == "cod"){

            $data['title'] = _lang("Payment done");
            $this->load->view("payment/client_view/html/success",$data);

        }else if($method == "razorpay"){

            $this->mPaymentModel->updateInvoice($id,$method,$transaction,$key);

            $data['title'] = _lang("Payment done");
            $this->load->view("payment/client_view/html/success",$data);

        }
    }

    public function payment_success($args){

        //validate change order payment status
        //unpaid
        //paid
        //cash on delivery
        //refunded


        //pending --
        //confirmed
        //preparing - on printing
        //shipped - on delivery - on ready
        //delivered
        //cancelled

        if(isset($args['invoiceId']) && $args['invoiceId'] > 0){

            $user_id = SessionManager::getData("id_user");

            $this->db->where("user_id",$user_id);
            $this->db->where("module","order_payment");
            $this->db->where("id",intval($args['invoiceId']));

            $invoice = $this->db->get('invoice',1);
            $invoice = $invoice->result();

            if(isset($invoice[0])){
                if($invoice[0]->method == "cod"){
                    $this->mOrderPayment->updateOrderPaymentStatus($invoice[0],"cod");
                }else{
                    $this->mOrderPayment->updateOrderPaymentStatus($invoice[0],"paid");
                }
            }

            return TRUE;
        }


        return FALSE;
    }

    public function payment_error(){

        $invoice_id = intval($this->input->get("invoiceid"));
        $user_id = SessionManager::getData("id_user");

        if( $invoice_id > 0){

            $user_id = SessionManager::getData("id_user");

            $this->db->where("user_id",$user_id);
            $this->db->where("module","order_payment");
            $this->db->where("id",intval($invoice_id));

            $invoice = $this->db->get('invoice',1);
            $invoice = $invoice->result();

            if(isset($invoice[0])){
                $this->mOrderPayment->updateOrderPaymentStatus($invoice[0],"unpaid");
            }

        }

        $this->load->view("payment/client_view/html/error",NULL);
    }

    public function onUpgrade()
    {

        return TRUE;
    }

    public function onInstall()
    {

        return TRUE;
    }


}